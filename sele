#!/usr/bin/awk -E
#https://github.com/ryandward/sele
BEGIN {

  PROCINFO["sorted_in"] = "@ind_num_asc"

  for( i = 1; i <= ARGC; i++ ) {
    if( substr( ARGV[i], 1, 1 ) != "-" )
    break;
    if( ARGV[i] == "-c" ) {
      column = ARGV[i+1];
      i++;
      continue;
    }

    if( ARGV[i] == "-q" ) {
      quiet = 1;
      continue;
    }

    if( ARGV[i] == "-u" ) {
      set = ARGV[i+1];
      i++;
      continue;
    }

    if( ARGV[i] == "-w" ) {
      where = ARGV[i+1];
      i++;
      continue;
    }

    printf("Unrecognized option: %s\n", ARGV[i] ) >"/dev/stderr";
    exit(1);
  }

  j = 1; c = 1;
  for( i; i < ARGC; i++ ) {
    ARGV[j++] = ARGV[i];
    c++;
  }

  ARGC = c;

  FS="\t";
  OFS="\t";
  # FPAT="[^,\"]*|\"([^\"]|\"\")*\""


  if(column!=""){
    clen = split(toupper(column),Column,",");
    for(i in Column){
      Node_index[Column[i]]
    }
  }

  split(toupper(where),Where,",");
  split(set,Set,",");

  for(i in Where) {

    if(index(Where[i],"==")){
      split(Where[i],Expression,"==")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="=="
    }

    else if(index(Where[i],"!=")){
      split(Where[i],Expression,"!=")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="!="
    }

    else if(index(Where[i],"!~")){
      split(Where[i],Expression,"!~")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="!~"
    }

    else if(index(Where[i],"~")){
      split(Where[i],Expression,"~")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="~"
    }

    else if(index(Where[i],">=")){
      split(Where[i],Expression,">=")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]=">="
    }

    else if(index(Where[i],"<=")){
      split(Where[i],Expression,"<=")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="<="
    }

    else if(index(Where[i],">")){
      split(Where[i],Expression,">")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]=">"
    }

    else if(index(Where[i],"<")){
      split(Where[i],Expression,"<")
      Where_map[Expression[1]]=Expression[2]
      Operator[Expression[1]]="<"
    }

    else {
      printf("Invalid lookup condition character\n" ) >"/dev/stderr";
      exit(1);
    }
  }

  for(i in Set) {
    split(Set[i],Get_set,":")
    split(Get_set[1], Get_expression, "==")
    split(Get_set[2], Set_expression, "=")

    Get_map[toupper(Get_expression[1])][i] = toupper(Get_expression[2])
    Set_map[toupper(Get_expression[1])][toupper(Set_expression[1])][i] = Set_expression[2]
  }
}

NR == 1 {
  for (i=1; i<=NF; i++) {
    Node_index[toupper($i)] = i
    Node_map[i] = $i
    if(!column){
      clen++;
      Column[i]=toupper($i);
    }
  }

  for (i in Column) {
    if(!Node_index[Column[i]]){
      printf("Unrecognized query column: %s\n", Column[i]) > "/dev/stderr" ; exit(1) }}

  for(i in Where_map){
    if(!(i in Node_index)) {
      printf("Unrecognized where column: %s\n", i) > "/dev/stderr" ; exit(1) }}

  for(i in Set_map){
    if(!(i in Node_index)) {
      printf("Unrecognized update column: %s\n", i) > "/dev/stderr" ; exit(1) }}

}

NR > 1 && where {
  for(i in Where_map) {
    if (NR in stop) next
    else {
      switch (Operator[i]){
        case "==":
          if (toupper($Node_index[i]) == Where_map[i]) continue
          break

        case "!=":
          if (toupper($Node_index[i]) != Where_map[i]) continue
          break

        case "~":
          if (toupper($Node_index[i]) ~ Where_map[i]) continue
          break

        case "!~":
          if (toupper($Node_index[i]) !~ Where_map[i]) continue
          break

        case ">=":
          # $Node_index[i] = $Node_index[i] + 0
          if ($Node_index[i] + 0 >= Where_map[i] + 0) continue
          break

        case "<=":
          # $Node_index[i] = $Node_index[i] + 0
          if ($Node_index[i] + 0 <= Where_map[i] + 0) continue
          break

        case ">":
          # $Node_index[i] = $Node_index[i] + 0
          if ($Node_index[i] + 0 > Where_map[i] + 0) continue
          break

        case "<":
          # $Node_index[i] = $Node_index[i] + 0
          if ($Node_index[i] + 0 < Where_map[i] + 0) continue
          break
      }
    }
    stop[NR]
  }
}
  # need to create a whole new list of operators
  # or figure out how to get awk to evaluate a function
NR>1 && set {
  for ( i in Get_map )
    for (z in Get_map[i])
      if ( Get_map[i][z] == toupper( $Node_index[i] ) )
        for ( j in Set_map[i] )
          if ( Set_map[i][j][z] )
              $Node_index[j] = Set_map[i][j][z]
}



(!(NR in stop)) {

  if ( quiet && FNR == 1 ) next
  for ( i in Column )
    printf $Node_index[Column[i]] ( i + 0 < clen + 0 ? OFS : ORS )
}
